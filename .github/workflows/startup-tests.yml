name: Startup Tests

on:
  pull_request:
  workflow_dispatch:

env:
  GITHUB_WORKFLOW: github_actions
  backend-directory: ./backend
  working-directory: ./frontend

jobs:
  startup-functional-test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:14.12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install requirements
        working-directory: ${{ env.backend-directory }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install dependencies
        working-directory: ${{ env.working-directory }}
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile
      - name: Install Playwright Browsers
        working-directory: ${{ env.working-directory }}
        run: npx playwright install --with-deps
      - name: Create frontend environment variables file
        working-directory: ${{ env.working-directory }}
        run: |
          touch .env
          echo PUBLIC_BACKEND_API_URL=http://localhost:8000/api >> .env
      - name: Create backend environment variables file
        working-directory: ${{ env.backend-directory }}
        run: |
          touch .env
          echo DJANGO_SUPERUSER_EMAIL=admin@tests.com >> .env
          echo DJANGO_SUPERUSER_PASSWORD=1234 >> .env
          echo POSTGRES_NAME=postgres >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env
          echo DB_HOST=localhost >> .env
          echo CISO_ASSISTANT_SUPERUSER_EMAIL='' >> .env
          echo CISO_ASSISTANT_URL=http://localhost:4173 >> .env
      - name: Run migrations
        working-directory: ${{ env.backend-directory }}
        run: |
          export $(grep -v '^#' .env | xargs)
          python manage.py migrate
      - name: Start test server
        working-directory: ${{ env.backend-directory }}
        run: |
          export $(grep -v '^#' .env | xargs)
          python manage.py createsuperuser --noinput
          nohup python manage.py runserver &
      - name: Run tests
        working-directory: ${{ env.working-directory }}
        run: npx playwright test tests/functional/startup.test.ts
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: startup-functional-test-report
          path: |
            ${{ env.working-directory }}/tests/reports/
          retention-days: 5
  startup-docker-compose-test:
    runs-on: ubuntu-20.04
    env:
      COMPOSE_TEST: True
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Install dependencies
        working-directory: ${{ env.working-directory }}
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile
      - name: Install Playwright Browsers
        working-directory: ${{ env.working-directory }}
        run: npx playwright install --with-deps
      - name: Build the Docker app
        run: docker compose -f docker-compose-build.yml up -d
      - name: Create backend environment variables file
        working-directory: ${{ env.backend-directory }}
        run: |
          touch .env
          export $(grep -v '^#' .env | xargs)
      - name: Config the Docker app
        run: |
          sleep 60 # give the migrations time to finish (included in the up on the previous step)
          docker compose -f docker-compose-build.yml exec backend /bin/bash -c "DJANGO_SUPERUSER_EMAIL=admin@tests.com DJANGO_SUPERUSER_PASSWORD=1234 python manage.py createsuperuser --noinput && exit 0"
      - name: Run tests
        working-directory: ${{ env.working-directory }}
        run: |
          response=$(curl -d "username=admin@tests.com&password=1234" -H "Origin: https://localhost:8443" https://localhost:8443/login -k)
          server_reponse='{"type":"redirect","status":302,"location":"/analytics"}'
          if [[ "$response" == "$server_reponse" ]]; then
            echo "Success"
            exit 0
          else
            echo "Failure"
            exit 1
          fi
